// Generated by CoffeeScript 2.2.1
(function() {

  /*
   FormatterBase

   Base class for each type of formatters. Template Pattern.
   the ID must be unique, the name is a human readable mini description, the format is used to use a custom file extension when saving colors to a file
  */
  var AndroidJavaFormatter, AndroidXMLFormatter, CLRFormatter, FormatterBase, HexFormatter, RGBACSSFormatter, SASSFormatter, UIColorObjCFormatter, UIColorSwiftFormatter;

  AndroidJavaFormatter = class AndroidJavaFormatter extends FormatterBase {
    id() {
      return "ANDROID";
    }

    name() {
      return "Android ARGB (Java code)";
    }

    format() {
      return "colors.java";
    }

    formatText(color, commented) {
      var formattedColor;
      formattedColor = `Color.argb(${Math.round(color.alpha * 255)},${Math.round(color.red * 255)},${Math.round(color.green * 255)},${Math.round(color.blue * 255)});`;
      if (commented) {
        return `${formattedColor} // ${color.name}`;
      } else {
        return formattedColor;
      }
    }

  };

  AndroidXMLFormatter = class AndroidXMLFormatter extends FormatterBase {
    id() {
      return "ANDROID_XML";
    }

    name() {
      return "Android ARGB (XML)";
    }

    format() {
      return "colors.xml";
    }

    formatText(color, commented) {
      var formattedColor, xmlVariable;
      formattedColor = "" + helperHex(color.alpha * 255) + color.hex;
      xmlVariable = '<color name="' + color.name.toLowerCase().trim().split(" ").join("_") + '">#' + formattedColor + "</color>";
      return xmlVariable;
    }

  };

  CLRFormatter = class CLRFormatter extends FormatterBase {
    // https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/DrawColor/Concepts/AboutColorLists.html
    id() {
      return "CLR";
    }

    name() {
      return "CLR (Color Lists)";
    }

    format() {
      return "colors.clr";
    }

    supportClipboard() {
      return false;
    }

    exportAsFile(colorDictionaries, url) {
      var alpha, blue, color, colorDictionary, colorList, green, i, len, red;
      colorList = NSColorList.alloc().initWithName("colors");
      for (i = 0, len = colorDictionaries.length; i < len; i++) {
        colorDictionary = colorDictionaries[i];
        red = Math.round(colorDictionary.red * 100) / 100;
        green = Math.round(colorDictionary.green * 100) / 100;
        blue = Math.round(colorDictionary.blue * 100) / 100;
        alpha = Math.round(colorDictionary.alpha * 100) / 100;
        color = NSColor.colorWithSRGBRed_green_blue_alpha(red, green, blue, alpha);
        colorList.setColor_forKey(color, colorDictionary.name);
      }
      return colorList.writeToFile(url.path());
    }

  };

  FormatterBase = (function() {
    class FormatterBase {
      /*
       id

       Override this at Subclass.
      */
      id() {}

      /*
       name

       Uses format name on modal panel. Override this at Subclass.
      */
      name() {}

      /*
       format

       Uses default file name when its saved. Override this at Subclass.
      */
      format() {}

      /*
       type

       `EXPORT_TYPE_FILE` or `EXPORT_TYPE_FILES`. Override this at Subclass.
      */
      type() {
        return this.constructor.EXPORT_TYPE_FILE;
      }

      /*
       supportClipboard

       If format supports clipboard then returns `true`.
      */
      supportClipboard() {
        return true;
      }

      /*
       formatText

       Converts a Color Dictionary to String. Override this at Subclass.
       The commented flag is used to add comments (like when we export colors)
       or removing them (like when we are populating the cell layers with color data)
      */
      formatText(color, commented) {}

      /*
       formatTextFromColorDictionaries

       Converts Color Dictionaries to String. Override this at Subclass if needs.
      */
      formatTextFromColorDictionaries(colorDictionaries) {
        var allColorsString, colorDictionary, i, len, lines;
        lines = [];
        for (i = 0, len = colorDictionaries.length; i < len; i++) {
          colorDictionary = colorDictionaries[i];
          lines.push(this.formatText(colorDictionary, true));
        }
        return allColorsString = lines.join("\n");
      }

      /*
       writeStringToFile

       Writes String type format as file. Override this at Subclass if needs.
      */
      writeStringToFile(filePath, string) {
        var fileString;
        fileString = NSString.stringWithString(string);
        return fileString.writeToFile_atomically_encoding_error(filePath, true, NSUTF8StringEncoding, null);
      }

      /*
       exportAsFile

       Writes format as file. Override this at Subclass if needs.
      */
      exportAsFile(colorDictionaries, url) {
        var text;
        text = this.exportAsString(colorDictionaries);
        return this.writeStringToFile(url.path(), text);
      }

      /*
       exportAsString

       Converts Color Dictionaries to String. Override this at Subclass if needs.
      */
      exportAsString(colorDictionaries) {
        var text;
        return text = this.formatTextFromColorDictionaries(colorDictionaries);
      }

    };

    FormatterBase.prototype.EXPORT_TYPE_FILE = "file";

    FormatterBase.prototype.EXPORT_TYPE_FILES = "files";

    return FormatterBase;

  }).call(this);

  HexFormatter = class HexFormatter extends FormatterBase {
    id() {
      return "HEX";
    }

    name() {
      return "HEX CSS";
    }

    format() {
      return "colors.css";
    }

    formatText(color, commented) {
      var formattedColor;
      formattedColor = '#' + color.hex;
      if (commented) {
        return `${formattedColor}; /* ${color.name} */`;
      } else {
        return formattedColor;
      }
    }

  };

  RGBACSSFormatter = class RGBACSSFormatter extends FormatterBase {
    id() {
      return "RGBA_CSS";
    }

    name() {
      return "RGBA CSS";
    }

    format() {
      return "colors.css";
    }

    formatText(color, commented) {
      var alpha, formattedColor;
      alpha = color.alpha < 1 ? color.alpha.toFixed(2) : color.alpha;
      formattedColor = `rgba(${Math.round(color.red * 255)},${Math.round(color.green * 255)},${Math.round(color.blue * 255)},${alpha});`;
      if (commented) {
        return `${formattedColor} /* ${color.name} */`;
      } else {
        return formattedColor;
      }
    }

  };

  SASSFormatter = class SASSFormatter extends FormatterBase {
    id() {
      return "SASS";
    }

    name() {
      return "SASS variables";
    }

    format() {
      return "_colors.scss";
    }

    formatText(color, commented) {
      var formattedColor, sassVariableName;
      formattedColor = '#' + color.hex;
      sassVariableName = '$' + color.name.toLowerCase().trim().split(" ").join("-").replace("'", "");
      return `${sassVariableName}: ${formattedColor};`;
    }

  };

  UIColorObjCFormatter = class UIColorObjCFormatter extends FormatterBase {
    id() {
      return "UICOLOR_OBJC";
    }

    name() {
      return "UIColor (Objective-C)";
    }

    format() {
      return "colors.m";
    }

    formatText(color, commented) {
      var alpha, blue, formattedColor, green, red;
      red = Math.round(color.red * 100) / 100;
      green = Math.round(color.green * 100) / 100;
      blue = Math.round(color.blue * 100) / 100;
      alpha = Math.round(color.alpha * 100) / 100;
      formattedColor = `[UIColor colorWithRed:${red} green:${green} blue:${blue} alpha:${alpha}];`;
      if (commented) {
        return `${formattedColor} // ${color.name}`;
      } else {
        return formattedColor;
      }
    }

  };

  UIColorSwiftFormatter = class UIColorSwiftFormatter extends FormatterBase {
    id() {
      return "UICOLOR_SWIFT";
    }

    name() {
      return "UIColor (Swift)";
    }

    format() {
      return "colors.m";
    }

    formatText(color, commented) {
      var alpha, blue, formattedColor, green, red;
      red = Math.round(color.red * 100) / 100;
      green = Math.round(color.green * 100) / 100;
      blue = Math.round(color.blue * 100) / 100;
      alpha = Math.round(color.alpha * 100) / 100;
      formattedColor = `UIColor(red:${red}, green:${green}, blue:${blue}, alpha:${alpha})`;
      if (commented) {
        return `${formattedColor} // ${color.name}`;
      } else {
        return formattedColor;
      }
    }

  };

}).call(this);
